(define uc-gvecs (list #(0 0 0) #(0 -1 -1) #(0 -1 1) #(-1 0 -1) #(-1 0 1) #(1 0 -1) #(1 0 1) #(0 1 -1) #(0 1 1) #(-1 -1 0) #(1 1 0) #(1 -1 0) #(-1 1 0) #(0 0 -2) #(0 0 2) #(0 -1 -2) #(0 -1 2) #(-1 0 -2) #(-1 0 2) #(1 0 -2) #(1 0 2) #(0 1 -2) #(0 1 2) #(0 -2 0) #(-2 0 0) #(2 0 0) #(0 2 0) #(-1 -1 -2) #(-1 -1 2) #(1 1 -2) #(1 1 2) #(1 -1 -2) #(1 -1 2) #(-1 1 -2) #(-1 1 2) #(0 -2 -1) #(0 -2 1) #(-2 0 -1) #(-2 0 1) #(2 0 -1) #(2 0 1) #(0 2 -1) #(0 2 1) #(0 -2 -2) #(0 -2 2) #(-2 0 -2) #(-2 0 2) #(2 0 -2) #(2 0 2) #(0 2 -2) #(0 2 2)))
(define uc-coefs (list 0.006509988713824982-0.07430991596602736i -0.14858501604673846+0.037798932181882614i 0.14858501604673843-0.03779893218188265i 0.1485850160467384-0.037798932181882586i -0.1485850160467385+0.0377989321818826i -0.1485850160467385+0.03779893218188263i 0.1485850160467385-0.03779893218188265i 0.14858501604673843-0.03779893218188259i -0.1485850160467385+0.03779893218188263i -0.05796045325126349+0.009834853427071608i -0.057960453251263505+0.00983485342707161i -0.07397410695454079-0.040613880878154165i -0.07397410695454078-0.040613880878154186i -0.055001995038864486+0.07342833704372212i -0.055001995038864486+0.07342833704372212i -0.045988480619645444+0.00967774700948442i 0.045988480619645444-0.009677747009484424i -0.045988480619645444+0.009677747009484417i 0.04598848061964546-0.00967774700948442i 0.04598848061964546-0.009677747009484422i -0.04598848061964546+0.009677747009484426i 0.04598848061964546-0.009677747009484419i -0.04598848061964547+0.009677747009484422i 0.0006733988398186295+0.005833383133757143i 0.0006733988398186281+0.005833383133757143i 0.0006733988398186298+0.0058333831337571435i 0.0006733988398186282+0.0058333831337571435i 0.022141415260758895-0.020356404143648046i 0.02214141526075885-0.02035640414364806i 0.022141415260758898-0.02035640414364805i 0.022141415260758853-0.02035640414364806i -0.008413912285000654-0.014572480450529158i -0.008413912285000658-0.014572480450529165i -0.008413912285000656-0.014572480450529165i -0.008413912285000666-0.014572480450529179i 0.0005102563342371311-0.029259171073349383i 0.0005102563342371369-0.029259171073349393i -0.0005102563342371481+0.029259171073349383i -0.0005102563342371405+0.029259171073349383i -0.0005102563342371329+0.029259171073349383i -0.0005102563342371369+0.029259171073349393i 0.0005102563342371483-0.029259171073349393i 0.0005102563342371407-0.029259171073349393i 0.002588281223189957-0.0006278232264738109i 0.002588281223189956-0.0006278232264738123i 0.002588281223189957-0.0006278232264738104i 0.002588281223189958-0.0006278232264738094i 0.002588281223189958-0.000627823226473811i 0.002588281223189957-0.000627823226473811i 0.002588281223189958-0.0006278232264738104i 0.002588281223189957-0.0006278232264738113i))

; load and define calc-fourier-sum-fast
(add-to-load-path ".")
(load "../calc-fourier-sum-fast.scm")

; timing utility for stump expr
(define time (lambda (expr N)
    (let ((t1 (get-internal-real-time)))
        (do ((i 1 (+ i 1))) ((> i N))
            (expr)
        )
        (display (exact->inexact (/ (- (get-internal-real-time) t1) (* N internal-time-units-per-second))))
        (display " \"s\"\n")
    )
))

; === benchmarks ===
(display "=== Benchmarks ===\n")

; benchmark calc-fourier-fast
(define rp #(.2 .1 .3)) ; default testing point
(define f-fourier-fast (lambda () (calc-fourier-sum-fast rp)))

(define bench (lambda (n)
    (display "   Timing:\t") (time f-fourier-fast n)
))

(display "\ncalc-fourier-sum-fast\n")
(display "   Value:\t") (display (f-fourier-fast)) (display "\n")
(bench 10000)

; benchmark associated level-set function (< uc-level => inside; > uc-level => outside)
(display "\nlevel-set\n")
(define epsin 1)
(define epsout 13)
(define uc-level -0.12)
(define (level-set r)
    (cond ((< (calc-fourier-sum-fast r) uc-level) epsin)
          (else epsout))
)

(display "   Value:\t") (display (level-set rp)) (display "\n")
(display "   Timing:\t") 
(time (lambda () (level-set rp)) 10000)

(quit)